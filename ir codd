/*
 * IRremote: IRrecvDemo - demonstrates receiving IR codes with IRrecv
 * An IR detector/demodulator must be connected to the input RECV_PIN.
 * Version 0.1 July, 2009
 * Copyright 2009 Ken Shirriff
 * http://arcfn.com
 */

#include <IRremote.h>
#include <LiquidCrystal.h>

// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);


int RECV_PIN = 11;

IRrecv irrecv(RECV_PIN);

decode_results results;

// led channels intensity EEPROM
byte ch1[24][4], ch2[24][4],ch3[24][4],ch4[24][4];

// global variable for setup use and reading
int hr,mn,dd,mm,yy;

// manual intensity eeprom
byte man_ch1, man_ch2, man_ch3, man_ch4;

// manual auto switch eeprom
byte switch_man_auto; 

//char blank line
char blank_line[]="               ";

// on hold screen shows few minutes till multiple of 5, time, date, time , day
// 2 channels at a time, scroll with above

// LCD On when button press and off at 10sec of no function
//Mute level controlled by transistor and on off only as PWM not wasted(if possible only) 


//on menu button menu shows, line 1, dtime, line 2 auto
//up down of channel scrolls the menu
//

// Channel 1, Channel 2 selection also scrolls

// hour 1, hour 2 also scrolls


// 1 menu
void f_menu()
{
  char line1[]="1.Time and date ";
  char line2[]="2.Automatic mode";
  char line3[]="3.Manual mode";
  byte instance_scroll=1; 
  byte pressed=0, pressed_bef=0;
  byte blink_delay=0;
  byte blink_now=0;

  Serial.println("was here");

  while(pressed != 7)
  {

    blink_delay=millis()%10000;
    blink_delay= blink_delay/1000;
    blink_now=blink_delay % 2;

    switch (instance_scroll) {
    case 1:   
      //1st instance 
      //line 1 Time and date
      //line 2 Automatic mode
      //      Serial.println("inst1");
      lcd.setCursor(0, 0);
      if(blink_now ==1)
        lcd.print(line1);
      else
        lcd.print(blank_line);
      lcd.setCursor(0, 1);
      lcd.print(line2);
      break;
    case 2:   
      //2nd instance
      //line 1 Automatic mode
      //linen 2 Manual mode
      //      Serial.println("inst2");
      lcd.setCursor(0, 0);
      if(blink_now ==1)
        lcd.print(line2);
      else
        lcd.print(blank_line);
      lcd.setCursor(0, 1);
      lcd.print(line3);
      break;
    case 3:    
      //3rd instance
      // line 1 Manual mode
      // line 2 Time and date
      //      Serial.println("inst3");
      lcd.setCursor(0, 0);
      if(blink_now ==1)
        lcd.print(line3);
      else
        lcd.print(blank_line);
      lcd.setCursor(0, 1);
      lcd.print(line1);
      break;
    }


    if (irrecv.decode(&results)) 
    {
      Serial.println("got some ");
      Serial.println(results.value);
      delay(100);
      pressed_bef=pressed;
      pressed=f_button_pressed();
      if (pressed==0)
        pressed= pressed_bef;
      else
      {
        if(pressed==2)
          instance_scroll++;
        if(pressed==3)
          instance_scroll--;

        if (instance_scroll>3)
          instance_scroll=1;          
        if (instance_scroll<1)
          instance_scroll=3;
        Serial.print("pressed now-");
        Serial.println(pressed);
        Serial.print("instance_scroll");
        Serial.println(instance_scroll);
      }

      irrecv.resume(); // Receive the next value
    }

  }

}
// 1.1 Date and time
// 1.1.1 hour
// 1.1.2 minute
// 1.1.3 day
// 1.1.4 month
// 1.1.5 year

void menu_date_time()
{
  char line1[8]="Hour:   ";
  char line2[8]="Minute: ";
  char line3[8]="Day:    ";
  char line4[8]="Month:  ";
  char line5[8]="Year    ";
}

// 1.2 Auto LED
// 1.2.1 channel select
// 1.2..1.1 0-15min, 15min-30min.....etc<scroll up and down from 00-23hrs> intensity
void menu_auto()
{
  char line1[9]="Channel-1";
  char line2[9]="Channel-2";
  char line3[9]="Channel-3";
  char line4[9]="Channel-4";
  
  
  char line11[10]="Time     :";
  char line12[10]="Intensity:";
  
}


// 1.3 Manual LED
// 1.3.1 channel
// 1.3.1.1 channel intensity

//pressing channel shows indiv channels, after all channels goes off, all come on then
//up down shows level of that channel
//menu pressing goes back to auto mode
//mute to increase decrease sound

int f_button_pressed()
{

  //1-menu
  //2-ch left
  //3-ch right
  //4-vol left
  //5-vol-right
  //6-mute
  //7-pow


  switch (results.value) {
    //Menu
  case 2104:   
    results.value=0;
    return(1);
    break;
  case 56:   
    results.value=0;
    return(1);
    break;

    //Channel left
  case 2080:    
    results.value=0;
    return(2);
    break;
  case 32:  
    results.value=0;
    return(2);
    break;  

    //Channel right
  case 2081:    
    results.value=0;
    return(3);
    break;
  case 33:   
    results.value=0;
    return(3);
    break;

    //Vol left 
  case 2065:  
    results.value=0;
    return(4);
    break;  
  case 17: 
    results.value=0;
    return(4);
    break;

    //Vol right
  case 2064:   
    results.value=0;
    return(5);
    break;
  case 16:    
    results.value=0;
    return(5);
    break;

    //Mute
  case 2061:    
    results.value=0;
    return(6);
    break;
  case 13:    
    results.value=0;
    return(6);
    break;

    //Power
  case 2060:   
    results.value=0;
    return(7);
    break;
  case 12:   
    results.value=0;
    return(7);
    break;
  default:
    results.value=0;
    return(0);
    break;
  }



}


void setup()
{
  Serial.begin(9600);
  irrecv.enableIRIn(); // Start the receiver

}

void loop() {
  static  int menu=0, chl,vol,mute,pow, pressed;
  static byte backlight, backlight_start_time, backlight_duration;  


  if (irrecv.decode(&results)) 
  {
    Serial.println(results.value);
    delay(100);
    irrecv.resume(); // Receive the next value
    pressed=f_button_pressed();
    Serial.println(pressed);
    if(pressed==1)
    {
      // start the light
      Serial.println("light on now");
      backlight=1;
      f_menu();
      Serial.println("light offing in 5s now");
      backlight_start_time= (millis()/1000)%10;
     Serial.println(backlight_start_time);
    }

    pressed=0;
  }
  // wait for 5sec before switching off the lights
  if (backlight ==1)
  {
    backlight_duration= ((millis()/1000)%10) - backlight_start_time;
    if(backlight_duration >9)
    {
      backlight=0;
      Serial.println("switching off led");
      Serial.println((millis()/1000)%10);
    }
  }
  /*  switch (results.value) {
   //Menu
   case 2059:   
   results.value=0;
   menu++;
   Serial.print("menu now");
   Serial.println(menu);
   break;
   case 11:   
   results.value=0;
   
   menu++;
   Serial.print("menu now");
   Serial.println(menu);
   break;
   
   //Channel left
   case 2080:    
   results.value=0;
   chl++;
   Serial.print("Ch left");
   Serial.println(chl);
   break;
   case 32:  
   results.value=0;
   chl++;
   Serial.print("Ch left");
   Serial.println(chl);
   break;  
   
   //Channel right
   case 2081:    
   results.value=0;
   chl--;
   Serial.print("Ch right");
   Serial.println(chl);
   break;
   case 33:   
   results.value=0;
   chl--;
   Serial.print("Ch left");
   Serial.println(chl);
   break;
   
   //Vol left 
   case 2065:  
   results.value=0;
   vol++;
   Serial.print("Vol left");
   Serial.println(vol);
   break;  
   case 17: 
   results.value=0;
   vol++;
   Serial.print("Vol left");
   Serial.println(vol);
   break;
   
   //Vol right
   case 2064:   
   results.value=0;
   vol--;
   Serial.print("Vol right");
   Serial.println(vol);
   break;
   case 16:    
   results.value=0;
   vol--;
   Serial.print("Vol right");
   Serial.println(vol);
   break;
   
   //Mute
   case 2061:    
   results.value=0;
   mute++;
   Serial.print("Mute");
   Serial.println(mute);
   break;
   case 13:    
   results.value=0;
   mute++;
   Serial.print("Mute");
   Serial.println(mute);
   break;
   
   //Power
   case 2060:   
   results.value=0;
   pow++;
   Serial.print("Power");
   Serial.println(pow);
   break;
   case 12:   
   results.value=0;
   pow++;
   Serial.print("Power");
   Serial.println(pow);
   break;
   } */




}










